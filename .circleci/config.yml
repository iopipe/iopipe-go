version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1-stretch
    working_directory: /go/src/github.com/iopipe/iopipe-go
    environment:
      GOARCH: amd64
      GOOS: linux
      IOPIPE_DEBUG: ""
      IOPIPE_ENABLED: ""
      IOPIPE_TIMEOUT_WINDOW: ""
      IOPIPE_TOKEN: ""
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - run:
          name: create test results directory
          command: mkdir -p $TEST_RESULTS
      - restore_cache:
          keys:
            - v1-pkg-cache
      - run:
          name: Install junit report generator
          command: go get -u github.com/jstemmer/go-junit-report
      - run:
          name: Install deps
          command: go get -u github.com/golang/dep/cmd/dep && dep ensure
      - run:
          name: Run unit tests
          command: |
            trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
            go test -v -race | tee ${TEST_RESULTS}/go-test.out
      - save_cache:
          key: v1-pkg-cache
          paths:
            - "/go/pkg"
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results

  acceptance:
    docker:
      - image: circleci/golang:1-stretch
    working_directory: /go/src/github.com/iopipe/iopipe-go
    environment:
      GOARCH: amd64
      GOOS: linux
    steps:
      - checkout
      - run:
          name: add Node.js PPA
          command: curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
      - run:
          name: Install Node.js
          command: sudo apt-get update && sudo apt-get install -y nodejs
      - run:
          name: Install Serverless
          command: sudo npm install -g serverless
      - run:
          name: Build and deploy acceptance tests
          command: cd acceptance/serverless && make build && sls deploy

  coverage:
    docker:
      - image: circleci/golang:1-stretch
    working_directory: /go/src/github.com/iopipe/iopipe-go
    environment:
      GOARCH: amd64
      GOOS: linux
      IOPIPE_DEBUG: ""
      IOPIPE_ENABLED: ""
      IOPIPE_TIMEOUT_WINDOW: ""
      IOPIPE_TOKEN: ""
    steps:
      - checkout
      - run:
          name: Install deps
          command: go get -u github.com/golang/dep/cmd/dep && dep ensure
      - run:
          name: Generate coverage report
          command: go test -race -coverprofile=coverage.txt -covermode=atomic
      - run:
          name: Upload coverage report
          command: bash <(curl -s https://codecov.io/bash)

workflows:
  version: 2
  build-all:
    jobs:
      - build
      - acceptance:
          requires:
            - build
          filters:
            branches:
              only: master
      - coverage:
          requires:
            - build
